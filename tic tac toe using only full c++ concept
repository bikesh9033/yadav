#include <iostream>
using namespace std;

class Game {
protected:
    char board[3][3];
    char currentPlayer;
    int moveCount;

public:
    Game() : currentPlayer('X'), moveCount(0) {
        char pos = '1';
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                board[i][j] = pos++;
        }
    }
  }
    virtual void startGame() = 0; // Pure virtual
};


class TicTacToe;
void displayWinner(const TicTacToe&);

class TicTacToe : public Game {
private:
    static int totalGames;

public:
    TicTacToe() {
        ++totalGames;
    }


    void displayBoard() const {
        cout << "\n";
        for (int i = 0; i < 3; i++) {
            cout << " ";
            for (int j = 0; j < 3; j++) {
                cout << board[i][j];
                if (j < 2) cout << " | ";
            }
            if (i < 2) cout << "\n-----------\n";
        }
        cout << "\n\n";
    }

    // Overloaded makeMove for integer
    bool makeMove(int position) {
        if (position < 1 || position > 9) return false;
        int row = (position - 1) / 3;
        int col = (position - 1) % 3;
        if (board[row][col] == 'X' || board[row][col] == 'O') return false;
        board[row][col] = currentPlayer;
        moveCount++;
        return true;
    }

    bool makeMove(const string& pos) {
        if (pos.length() != 1 || pos[0] < '1' || pos[0] > '9')
            return false;
        return makeMove(pos[0] - '0');
    }

    TicTacToe operator++(int) {
        TicTacToe temp = *this;
        moveCount++;
        return temp;
    }

    bool checkWin() const {
        for (int i = 0; i < 3; ++i)
            if ((board[i][0] == board[i][1] && board[i][1] == board[i][2]) ||
                (board[0][i] == board[1][i] && board[1][i] == board[2][i]))
                return true;

        if ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) ||
            (board[0][2] == board[1][1] && board[1][1] == board[2][0]))
            return true;

        return false;
    }

    
    bool checkDraw() const {
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                if (board[i][j] != 'X' && board[i][j] != 'O')
                    return false;
        return true;
    }


    char getPlayer() const {
        return currentPlayer;
    }


    void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    
    friend void displayWinner(const TicTacToe&);

    
    static int getTotalGames() {
        return totalGames;
    }

    
    void startGame() override {
        int move;
        cout << "=== Welcome to OOP Tic Tac Toe ===\n";
        cout << "Player 1: X\nPlayer 2: O\n";

        while (true) {
            displayBoard();
            cout << "Player " << currentPlayer << ", enter position (1-9): ";
            cin >> move;

            if (!makeMove(move)) {
                cout << " Invalid move! Try again.\n";
                continue;
            }

            if (checkWin()) {
                displayBoard();
                displayWinner(*this);
                break;
            }

            if (checkDraw()) {
                displayBoard();
                cout << " It's a draw!\n";
                break;
            }

            switchPlayer();
        }
        cout << "Total moves: " << moveCount << "\n";
    }
};


int TicTacToe::totalGames = 0;


void displayWinner(const TicTacToe& game) {
    cout << Player " << game.getPlayer() << " wins!\n";
}


int main() {
    TicTacToe game;
    game.startGame();
    cout << "Total games played: " << TicTacToe::getTotalGames() << "\n";
    return 0;
}
